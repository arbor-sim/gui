name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_ubuntu:
    name: "Build on Ubuntu"
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
        - { 
            name: "Ubuntu GCC",
            os:   "ubuntu-20.04",
            cc:   "gcc-10",
            cxx:  "g++-10"
          }
        - { 
            name: "Ubuntu LLVM",
            os:   "ubuntu-20.04",
            cc:   "clang",
            cxx:  "clang++"
          }
      fail-fast: false
    env:
        CC:         ${{ matrix.config.cc }}
        CXX:        ${{ matrix.config.cxx }}
    steps:
      - name: "Clone w/ submodules"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: "recursive"
      - name: Update apt
        run: sudo apt update
      - name: Install missing packages
        run: sudo apt install libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libglu1-mesa-dev freeglut3-dev mesa-common-dev
      - name: Check config
        run: |
          $CC --version
          $CXX --version
      - name: Configure
        run: cmake -S . -B build -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_C_COMPILER=$CC
      - name: Build
        run: cmake --build build
  build_macos:
    name: "Build on MacOS"
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
        - {
            name: "MacOS",
            os:   "macos-11",
            cc:   "clang",
            cxx:  "clang++"
          }
        - {
            name: "MacOS",
            os:   "macos-12",
            cc:   "clang",
            cxx:  "clang++"
          }
    env:
        CC:         ${{ matrix.config.cc }}
        CXX:        ${{ matrix.config.cxx }}
    steps:
      - name: "Clone w/ submodules"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: "recursive"
      - name: Check config
        run: |
          $CC --version
          $CXX --version
      - name: Configure
        run: cmake -S . -B build -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_C_COMPILER=$CC -DARBORGUI_BUILD_BUNDLE=ON
      - name: Build
        run: cmake --build build --target package

  build_appimage:
    name: "Make Linux AppImage Nightly"
    runs-on: ubuntu-20.04
    env:
        CC: gcc-10
        CXX: g++-10
    steps:
      - name: install dependencies
        run: |
          sudo apt update
          sudo apt install libfuse2 libxml2-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libglu1-mesa-dev freeglut3-dev mesa-common-dev
      - name: "Clone w/ submodules"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Make AppImage
        run: sh ./scripts/appimage.sh
      - uses: actions/upload-artifact@v2
        with:
          name: linux appimage
          path: './*.AppImage*'
      - uses: actions/upload-artifact@v2
        with:
          name: linux-tar-gz
          path: './*.tar.gz*'

  build_diskim:
    name: "Make Apple Disk Image Nightly"
    runs-on: macos-11
    steps:
      - name: "Clone w/ submodules"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Configure
        run: cmake -S . -B build -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DARBORGUI_BUILD_BUNDLE=ON
      - name: Build
        run: cmake --build build --target package
      - name: Upload .dmg
        uses: actions/upload-artifact@v2
        with:
          name: apple dmg
          path: build/*.dmg