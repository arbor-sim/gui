name: Release

on:
  push:
    tags:
      - v*

jobs:
  build_appimage:
    name: "Build on Ubuntu"
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
        - { 
            name: "Ubuntu",
            os:   "ubuntu-22.04",
            cc:   "gcc-12",
            cxx:  "g++-12"
          }
      fail-fast: false
    env:
        CC:         ${{ matrix.config.cc }}
        CXX:        ${{ matrix.config.cxx }}
        app_dir:    /tmp/tmp.JbLDI6xwc5
        bld_dir:    build_dir
    steps:
      - name: "Clone w/ submodules"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: "recursive"
      - name: Update apt
        run: sudo apt update
      - name: Install missing packages
        run: sudo apt install libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libglu1-mesa-dev freeglut3-dev mesa-common-dev
      - name: Check config
        run: |
          $CC --version
          $CXX --version
      - name: Configure
        run: cmake -S . -B $bld_dir -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_C_COMPILER=$CC --install-prefix $app_dir/usr -DARB_ARCH=x86-64-v2
      - name: Build
        run: cmake --build $bld_dir -j 2
      - name: Install
        run: cmake --install $bld_dir
      - name: Get Linuxdeploy
        run: wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
      - name: Mark executable
        run: chmod +x ./linuxdeploy-x86_64.AppImage
      - name: Package Arbor GUI AppImage
        run: ./linuxdeploy-x86_64.AppImage --appdir="$app_dir" --output=appimage
      - name: Delete Linuxdeploy
        run: rm -f ./linuxdeploy-x86_64.AppImage
      - uses: actions/upload-artifact@v4
        with:
          name: linux appimage
          path: './*.AppImage*'
  build_diskim:
    name: "Build on MacOS"
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
        - {
            name: "MacOS",
            os:   "macos-12",
            cc:   "clang",
            cxx:  "clang++"
          }
    env:
        CC:         ${{ matrix.config.cc }}
        CXX:        ${{ matrix.config.cxx }}
    steps:
      - name: "Clone w/ submodules"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: "recursive"
      - name: Check config
        run: |
          $CC --version
          $CXX --version
      - name: Configure
        run: cmake -S . -B build -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_C_COMPILER=$CC -DARBORGUI_BUILD_BUNDLE=ON
      - name: Build
        run: cmake --build build -j 2 --target package
      - name: Upload .dmg
        uses: actions/upload-artifact@v4
        with:
          name: apple dmg
          path: build/*.dmg

  make_rel:
    name: Make Release
    needs: [build_diskim, build_appimage]
    runs-on: ubuntu-latest
    steps:
      - name: "Get artifacts"
        uses: actions/download-artifact@v4
      - name: Move and rename appimage
        run: mv */*.AppImage arbor-gui.AppImage
      - name: Move and rename dmg
        run: mv */*.dmg arbor-gui.dmg
      - name: "Clone w/ submodules"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: "recursive"
          path: gui
      - name: Make tarball
        run: |
          the_ref=${{ github.ref }}
          the_tag="${the_ref/refs\/tags\//}"
          $GITHUB_WORKSPACE/gui/scripts/create_tarball $GITHUB_WORKSPACE/gui $the_tag $GITHUB_WORKSPACE/arbor-gui-$the_tag-full.tar.gz
      - name: "Make Release"
        uses: ncipollo/release-action@v1
        with:
          omitBody: false
          draft: true
          prerelease: false
          generateReleaseNotes: true
          artifacts: '*.dmg,*.AppImage,*.tar.gz'
          token: ${{ secrets.GITHUB_TOKEN }}
